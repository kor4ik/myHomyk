---
### Card Thermostat ###
card_thermostat_ewpe:
  template:
    - "ulm_translation_engine"
    - "icon_more_info_new"
  variables:
    ulm_card_thermostat_name: "[[[ return entity.attributes.friendly_name ]]]"
    ulm_card_thermostat_icon: "[[[ return 'mdi:thermometer' ]]]"
    ulm_card_thermostat_enable_collapse: false
    ulm_card_thermostat_enable_controls: false
    ulm_card_thermostat_enable_hvac_modes: false
    ulm_card_thermostat_enable_background_color: false
    ulm_card_thermostat_enable_display_temperature: false
    ulm_card_thermostat_enable_horizontal: false
    ulm_card_thermostat_enable_popup: false
    ulm_card_thermostat_fan_entity: null
    ulm_card_thermostat_minimum_temp_spread: 1
    ulm_card_thermostat_preset_mode: false
    ulm_translation_state: "[[[ return entity.state.charAt(0).toUpperCase() + entity.state.slice(1) ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: "template"
      value: >
        [[[
          return (entity.state == 'heat' && variables.ulm_card_thermostat_enable_background_color)
        ]]]
      styles:
        card:
          - background-color: "rgba(255,165,0,0.75)"
    - operator: "template"
      value: >
        [[[
          return (entity.state == 'cool' && variables.ulm_card_thermostat_enable_background_color)
        ]]]
      styles:
        card:
          - background-color: "rgba(0,191,255,0.75)"
    - operator: "template"
      value: >
        [[[
          return entity.state != 'off'
        ]]]
      styles:
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
  styles:
    grid:
      - grid-template-areas: >
          [[[
                var areas = [];
                if (variables.ulm_card_thermostat_enable_horizontal) {
                  return "\"item1 item2\"";
                }
                if (variables.ulm_card_thermostat_enable_display_temperature) {
                    areas.push("item1 item4");
                } else {
                  areas.push("item1 item1");
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                    areas.push("item2 item2");
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                    areas.push("low_temp_adjustment low_temp_adjustment");
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                    areas.push("item3 item3");
                }
                return "\"" + areas.join("\" \"") + "\"";
          ]]]
      - grid-template-columns: >
          [[[
                  return variables.ulm_card_thermostat_enable_horizontal ? "1fr 1fr" : "2fr 1fr";
          ]]]
      - grid-template-rows: >
          [[[
                var rows = [];
                rows.push("min-content");
                if (variables.ulm_card_thermostat_enable_horizontal) {
                  return "min-content";
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                    rows.push("min-content");
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                    rows.push("min-content");
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                    rows.push("min-content");
                }
                return rows.join(" ");
          ]]]
      - row-gap: "12px"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
    custom_fields:
      item2:
        - display: >
            [[[
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls) {
                      return "block";
                  } else {
                      return "none";
                  }
            ]]]
      low_temp_adjustment:
        - display: >
            [[[
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_controls && entity.attributes.target_temp_high != null) {
                      return "block";
                  } else {
                      return "none";
                  }
            ]]]
      item3:
        - display: >
            [[[
                if (variables.ulm_card_thermostat_enable_horizontal) {
                  return "none";
                }
                if ( !(variables.ulm_card_thermostat_enable_collapse && entity.state == "off") && variables.ulm_card_thermostat_enable_hvac_modes) {
                  return "block";
                } else {
                  return "none";
                }
            ]]]
      item4:
        - display: >
            [[[
                if (variables.ulm_card_thermostat_enable_horizontal) {
                  return "none";
                }
                if (variables.ulm_card_thermostat_enable_display_temperature) {
                  return "block";
                } else {
                  return "none";
                }
            ]]]
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return entity.entity_id ]]]"
              variables: >
                [[[
                  let vars = variables;

                  if(variables.ulm_card_thermostat_enable_popup) {
                    vars.ulm_custom_popup = {
                      'template': 'popup_thermostat_temperature',
                      'popup_variables': {'ulm_card_thermostat_preset_mode': variables.ulm_card_thermostat_preset_mode }
                    };
                  }
                  return vars;
                ]]]
              icon: "[[[ return variables.ulm_card_thermostat_icon ]]]"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'heat')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-red),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-red),0.2)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-blue),0.2)"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return entity.entity_id ]]]"
              variables: >
                [[[
                  let vars = variables;

                  if(variables.ulm_card_thermostat_enable_popup) {
                    vars.ulm_custom_popup = {
                      'template': 'popup_thermostat_temperature',
                      'popup_variables': {'ulm_card_thermostat_preset_mode': variables.ulm_card_thermostat_preset_mode }
                    };
                  }
                  return vars;
                ]]]
              name: "[[[ return variables.ulm_card_thermostat_name ]]]"
              label: >-
                [[[
                    var label = variables.ulm_translation_state;
                    if((entity.attributes.temperature || entity.attributes.target_temp_high != null) && !variables.ulm_card_thermostat_enable_display_temperature){
                      return variables.ulm_translation_state;
                    }
                    return label;
                ]]]
    item2:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        styles:
          card:
            - background: "none"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              entity: "[[[ return entity.entity_id ]]]"
              icon: "mdi:minus"
              tap_action:
                action: "call-service"
                service: "climate.set_temperature"
                service_data:
                  target_temp_low: |
                    [[[
                      if (entity.attributes.target_temp_low == null) {
                        return 0;
                      } else {
                        const unit = hass.config.unit_system.temperature
                        const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                        const new_temp =  (parseFloat(entity.attributes.target_temp_high) - step)
                        return (new_temp - variables.ulm_card_thermostat_minimum_temp_spread < entity.attributes.target_temp_low ? new_temp - variables.ulm_card_thermostat_minimum_temp_spread : entity.attributes.target_temp_low);
                      }
                    ]]]
                  target_temp_high: |
                    [[[
                      if (entity.attributes.target_temp_low == null) {
                        return 0;
                      } else {
                        const unit = hass.config.unit_system.temperature
                        const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                        return (parseFloat(entity.attributes.target_temp_high) - step)
                      }
                    ]]]
                  temperature: |
                    [[[
                      if (entity.attributes.temperature == null) {
                        return 0;
                      } else {
                        const unit = hass.config.unit_system.temperature
                        const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                        return (parseFloat(states[entity.entity_id].attributes.temperature) - step)
                      }
                    ]]]
                  entity_id: "[[[ return entity.entity_id ]]]"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
          item2:
            card:
              type: "custom:button-card"
              show_icon: false
              show_name: false
              show_label: true
              entity: "[[[ return entity.entity_id ]]]"
              label: |-
                [[[
                    var temperature = entity.attributes.temperature || entity.attributes.target_temp_high;
                    if (temperature == null) {
                      var temperature = '-';
                    }
                    return temperature + hass.config.unit_system.temperature;
                ]]]
              styles:
                card:
                  - background: "none"
                  - box-shadow: "none"
          item3:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              entity: "[[[ return entity.entity_id ]]]"
              icon: "mdi:plus"
              tap_action:
                action: "call-service"
                service: "climate.set_temperature"
                service_data:
                  target_temp_low: |
                    [[[
                      if (entity.attributes.target_temp_low == null) {
                        return 0;
                      } else {
                        return entity.attributes.target_temp_low;
                      }
                    ]]]
                  target_temp_high: |
                    [[[
                      if (entity.attributes.target_temp_high == null) {
                        return 0;
                      } else {
                        const unit = hass.config.unit_system.temperature
                        const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                        return (parseFloat(entity.attributes.target_temp_high) + step)
                      }
                    ]]]
                  temperature: |
                    [[[
                      if (entity.attributes.temperature == null) {
                        return 0;
                      } else {
                        const unit = hass.config.unit_system.temperature
                        const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                        return (parseFloat(states[entity.entity_id].attributes.temperature) + step)
                      }
                    ]]]
                  entity_id: "[[[ return entity.entity_id ]]]"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
    low_temp_adjustment:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        styles:
          card:
            - background: "none"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              entity: "[[[ return entity.entity_id ]]]"
              icon: "mdi:minus"
              tap_action:
                action: "call-service"
                service: "climate.set_temperature"
                service_data:
                  target_temp_low: |
                    [[[
                      const unit = hass.config.unit_system.temperature
                      const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                      return (parseFloat(entity.attributes.target_temp_low) - step)
                    ]]]
                  target_temp_high: "[[[ return entity.attributes.target_temp_high ]]]"
                  entity_id: "[[[ return entity.entity_id ]]]"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
          item2:
            card:
              type: "custom:button-card"
              show_icon: false
              show_name: false
              show_label: true
              entity: "[[[ return entity.entity_id ]]]"
              label: |-
                [[[
                    var temperature = entity.attributes.target_temp_low;
                    if (temperature == null) {
                      var temperature = '-';
                    }
                    return temperature + hass.config.unit_system.temperature;
                ]]]
              styles:
                card:
                  - background: "none"
                  - box-shadow: "none"
          item3:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              entity: "[[[ return entity.entity_id ]]]"
              icon: "mdi:plus"
              tap_action:
                action: "call-service"
                service: "climate.set_temperature"
                service_data:
                  target_temp_low: |
                    [[[
                      const unit = hass.config.unit_system.temperature
                      const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                      return (parseFloat(entity.attributes.target_temp_low) + step)
                    ]]]
                  target_temp_high: |
                    [[[
                      const unit = hass.config.unit_system.temperature
                      const step = variables.ulm_card_thermostat_temp_step || entity.attributes.target_temp_step || (unit == 'Â°F' ? 1.0 : 0.5)
                      const new_temp = (parseFloat(entity.attributes.target_temp_low) + step)
                      return (new_temp + variables.ulm_card_thermostat_minimum_temp_spread > entity.attributes.target_temp_high ? new_temp + variables.ulm_card_thermostat_minimum_temp_spread : entity.attributes.target_temp_high)
                    ]]]
                  entity_id: "[[[ return entity.entity_id ]]]"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
    item3:
      card:
        type: "custom:button-card"
        styles:
          grid:
            - grid-template-areas: >
                [[[
                      var areas = [];
                      if (states[entity.entity_id].attributes.fan_modes.includes("Auto")) {
                          areas.push("fan_auto");
                      }
                      if (states[entity.entity_id].attributes.fan_modes.includes("Quiet")) {
                          areas.push("fan_quiet");
                      }
                      if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the upmost position")) {
                          areas.push("fan_up");
                      }
                      if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the lowest position")) {
                          areas.push("fan_down");
                      }
                      if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                          areas.push("heat");
                      }
                      if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                          areas.push("cool");
                      }
                      return "\"" + areas.join(" ") + "\"";
                ]]]
            - grid-template-columns: >
                [[[
                      var columns = [];
                      if (states[entity.entity_id].attributes.fan_modes.includes("Auto")) {
                          columns.push("1fr");
                      }
                      if (states[entity.entity_id].attributes.fan_modes.includes("Quiet")) {
                          columns.push("1fr");
                      }
                      if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the upmost position")) {
                          columns.push("1fr");
                      }
                      if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the lowest position")) {
                          columns.push("1fr");
                      }
                      if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                          columns.push("1fr");
                      }
                      if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                          columns.push("1fr");
                      }
                      return columns.join(" ");
                ]]]
            - grid-template-rows: "min-content"
            - column-gap: "7px"
          card:
            - box-shadow: "none"
            - padding: "0px"
            - background: "none"
          custom_fields:
            fan_auto:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.fan_modes.includes("Auto")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
            fan_quiet:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.fan_modes.includes("Quiet")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
            fan_up:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the upmost position")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
            fan_down:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.swing_modes.includes("Fixed in the lowest position")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
            heat:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.hvac_modes.includes("heat")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
            cool:
              - display: >
                  [[[
                    if (states[entity.entity_id].attributes.hvac_modes.includes("cool")) {
                        return "block";
                    } else {
                        return "none";
                    }
                  ]]]
        custom_fields:
          fan_auto:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:fan-auto"
              tap_action:
                action: "call-service"
                service: "climate.set_fan_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  fan_mode: "Auto"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'heat' && entity.attributes.fan_mode == 'Auto')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-red),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-red),0.2)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' && entity.attributes.fan_mode == 'Auto')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-blue),0.2)"
          fan_quiet:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:headphones"
              tap_action:
                action: "call-service"
                service: "climate.set_fan_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  fan_mode: "Quiet"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'heat' && entity.attributes.fan_mode == 'Quiet')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-red),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-red),0.2)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' && entity.attributes.fan_mode == 'Quiet')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-blue),0.2)"
          fan_up:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:fan-chevron-up"
              tap_action:
                action: "call-service"
                service: "climate.set_swing_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  swing_mode: "Fixed in the upmost position"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'heat' && entity.attributes.swing_mode == 'Fixed in the upmost position')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-red),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-red),0.2)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' && entity.attributes.swing_mode == 'Fixed in the upmost position')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-blue),0.2)"
          fan_down:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:fan-chevron-down"
              tap_action:
                action: "call-service"
                service: "climate.set_swing_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  swing_mode: "Fixed in the lowest position"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'heat' && entity.attributes.swing_mode == 'Fixed in the lowest position')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-red),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-red),0.2)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' && entity.attributes.swing_mode == 'Fixed in the lowest position')
                    ]]]
                  styles:
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                    img_cell:
                      - background-color: "rgba(var(--color-blue),0.2)"
          heat:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:fire"
              tap_action:
                action: "call-service"
                service: "climate.set_hvac_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  hvac_mode: "heat"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return entity.state == "heat"
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-red),0.5)"
                    icon:
                      - color: "rgba(var(--color-red),1)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
          cool:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:snowflake"
              tap_action:
                action: "call-service"
                service: "climate.set_hvac_mode"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  hvac_mode: "cool"
              state:
                - operator: "template"
                  value: >
                    [[[
                      return entity.state == "cool"
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-blue),0.5)"
                    icon:
                      - color: "rgba(var(--color-blue),1)"
                - operator: "template"
                  value: >
                    [[[
                      return (entity.state == 'cool' || entity.state == 'heat') && variables.ulm_card_thermostat_enable_background_color
                    ]]]
                  styles:
                    card:
                      - background-color: "rgba(var(--color-theme),0.15)"
    item4:
      card:
        type: "custom:button-card"
        show_icon: false
        show_name: false
        show_label: true
        entity: "[[[ return entity.entity_id ]]]"
        label: |-
          [[[
              var temperature = entity.attributes.current_temperature;
              if (temperature == null) {
                var temperature = '-';
              }
              return temperature + hass.config.unit_system.temperature;
          ]]]
        styles:
          card:
            - background: "none"
            - box-shadow: "none"
